{"version":3,"sources":["features/Task/Task.module.css","api/api.ts","redux/reducers/app-reducer.ts","utils/error-utils.ts","redux/reducers/auth-reducer.ts","components/Header/Header.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemForm.tsx","components/MutableSpan/MutableSpan.tsx","redux/reducers/todolists-reducer.ts","redux/reducers/tasks-reducer.ts","features/Task/Task.tsx","features/ToDoList/Todolist.tsx","features/ToDoList/TodolistList.tsx","features/login/Login.tsx","components/Footer/Footer.tsx","app/App.tsx","redux/store.ts","index.tsx","components/Footer/Footer.module.css","features/ToDoList/Todolist.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","title","post","then","response","data","catch","err","get","todolistId","put","delete","count","page","task","id","taskId","authAPI","email","password","rememberMe","SET_APP_STATUS","SET_APP_ERROR","iState","appStatus","appError","setAppStatus","status","type","setAppError","error","throwNewError","dispatch","message","Error","handlingError","console","SET_USER_DATA","REMOVE_USER_DATA","SET_APP_INIT_STATUS","appInit","isAuth","login","setAppInitStatus","init","authMe","a","result","resultCode","messages","Header","React","useDispatch","navigate","useNavigate","useSelector","state","auth","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","style","display","alignItems","Button","marginLeft","color","onClick","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","width","AddItemForm","memo","addTask","disabled","useState","setTitle","setError","addItemOnClick","trim","TextField","label","value","onChange","e","currentTarget","onKeyPress","key","className","size","backgroundColor","borderRadius","margin","maxWidth","minWidth","minHeight","maxHeight","MutableSpan","onChangeTitle","localTitle","setLocalTitle","readingMode","setReadingMode","setChangeTitle","onDoubleClick","onBlur","autoFocus","ADD_TODOLIST","SET_TODOLISTS","CHANGE_TITLE_TODOLIST","REMOVE_TODOLIST","SET_TODOLIST_FILTER_STATUS","SET_TODOLISTS_STATUS","todolists","todolistsStatus","changeTitleToDoListAC","toDoListID","setToDolistsStatusAC","ADD_TASK","SET_TASKS","UPDATE_TASK","REMOVE_TASK","setTasksAC","tasks","updateTaskAC","removeTaskAC","updateTaskTC","newTask","item","Task","styles","task__wrapper","Checkbox","newTaskStatus","Completed","New","completed","checked","icon","checkedIcon","IconButton","Todolist","filter","todolist","isDisabled","useEffect","items","changeTitle","useCallback","updateTodolistTitleTC","addTaskHandler","todoListId","createTaskTC","removeToDoListHandler","setTodolistFilterStatus","setTodolistFilterStatusAC","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","filteredTasks","t","Paper","todo__wrapper","textAlign","CircularProgress","map","todo__buttons","TodolistList","addToDoList","createTodolistTC","todolist__container","todolist__todolists","Login","formik","useFormik","initialValues","validate","values","onSubmit","Grid","container","justifyContent","xs","handleSubmit","FormControl","padding","FormLabel","FormGroup","getFieldProps","errors","FormControlLabel","control","Footer","footer_wrapper","footer_container","footer_name","footer_boxs","footer_box","href","faTelegram","faWhatsapp","faGithub","faLinkedin","footer_copyright","dangerouslySetInnerHTML","App","app","LinearProgress","height","path","element","rootReducres","combineReducers","action","i","oldTasks","store","createStore","applyMiddleware","thunk","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5b5daaee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task__wrapper\":\"Task_task__wrapper__22H5g\"};","import axios from \"axios\";\r\nimport {ITask, ITodolist} from \"../types/types\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '6e713ecd-57df-4877-9a84-e619dbd38570'\r\n        // 'api-key': 'a7116e67-1807-4b05-84ac-bacabf26edbb'\r\n    }\r\n});\r\n\r\nexport const todolistAPI = {\r\n\r\n    createTodolist(title: string): Promise<IResponse<{ item: ITodolist }>> {\r\n        return instance\r\n            .post<IResponse<{ item: ITodolist }>>('/todo-lists', {title})\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    getTodolists(): Promise<Array<ITodolist>> {\r\n        return instance\r\n            .get<Array<ITodolist>>('/todo-lists')\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    updateTodolistTitle(todolistId: string, title: string): Promise<IResponse> {\r\n        return instance\r\n            .put<IResponse>(`/todo-lists/${todolistId}`, {title})\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    deleteTodolist(todolistId: string): Promise<IResponse> {\r\n        return instance\r\n            .delete<IResponse>(`/todo-lists/${todolistId}`)\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    createTask(todolistId: string, title: string): Promise<IResponse<{ item: ITask }>> {\r\n        return instance\r\n            .post<IResponse<{ item: ITask }>>(`/todo-lists/${todolistId}/tasks`, {title})\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    getTasks(todolistId: string, count: number = 10, page: number = 1) {\r\n        return instance\r\n            .get<IGetTasksResponse>(`/todo-lists/${todolistId}/tasks/?count=${count}&page=${page}`)\r\n            .then(response => response)\r\n            .catch(err => err)\r\n    },\r\n\r\n    updateTask(todolistId: string, task: ITask): Promise<IResponse<{ item: ITask }>> {\r\n        return instance\r\n            .put<IResponse<{ item: ITask }>>(`/todo-lists/${todolistId}/tasks/${task.id}`, {...task})\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string): Promise<IResponse> {\r\n        return instance\r\n            .delete<IResponse>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me(): Promise<IResponse<IUser>> {\r\n        return instance\r\n            .get<IResponse<IUser>>('/auth/me')\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n    login(email:string, password: string, rememberMe: boolean): Promise<IResponse<{userId: number}>> {\r\n        return instance\r\n            .post<IResponse<{userId: number}>>('/auth/login', {email,password,rememberMe})\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    },\r\n    logout(): Promise<IResponse> {\r\n        return instance\r\n            .delete<IResponse>('/auth/login')\r\n            .then(response => response.data)\r\n            .catch(err => err)\r\n    }\r\n}\r\n\r\n//types\r\ninterface IGetTasksResponse {\r\n    error: string | null\r\n    items: ITask[]\r\n    totalCount: number\r\n}\r\n\r\ninterface IResponse<T = {}> {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: T\r\n}\r\n\r\ninterface IUser {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    High = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","//constants\r\nconst SET_APP_STATUS = 'todolist/app-reducer/SET_APP_STATUS'\r\nconst SET_APP_ERROR = 'todolist/app-reducer/SET_APP_ERROR'\r\n\r\n//initial state\r\nconst iState = {\r\n    appStatus: 'idle' as RequestStatusType,\r\n    appError: null as string | null\r\n}\r\n\r\n//reducer\r\nexport const appReducer = (state: InitialStateType = iState, action: TAppActions): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_APP_STATUS:\r\n            return {...state, appStatus: action.status}\r\n        case SET_APP_ERROR:\r\n            return {...state, appError: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: SET_APP_STATUS, status} as const)\r\nexport const setAppError = (error: string | null) => ({type: SET_APP_ERROR, error} as const)\r\n\r\n//types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = typeof iState\r\nexport type TAppActions =\r\n    | TSetAppStatus\r\n    | TSetAppError\r\ntype TSetAppStatus = ReturnType<typeof setAppStatus>\r\ntype TSetAppError = ReturnType<typeof setAppError>","import { Dispatch } from \"redux\";\r\nimport {setAppError, setAppStatus} from \"../redux/reducers/app-reducer\";\r\n\r\nexport const throwNewError = (dispatch: Dispatch, message: string | undefined) => {\r\n    dispatch(setAppStatus('failed'))\r\n    throw new Error(message || '')\r\n}\r\n\r\nexport const handlingError = (dispatch: Dispatch, err: Error | unknown) => {\r\n    if (err instanceof Error) {\r\n        dispatch(setAppError(err.message))\r\n    } else {\r\n        dispatch(setAppError('An error has occurred'))\r\n        console.error(`An error has occurred. Contact the administrator. Error data: ${err}`)\r\n    }\r\n}","import {ThunkType} from \"../store\";\r\nimport {authAPI} from \"../../api/api\";\r\nimport {handlingError, throwNewError} from \"../../utils/error-utils\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\n\r\n//constants\r\nconst SET_USER_DATA = 'todolist/auth-reducer/SET_USER_DATA'\r\nconst REMOVE_USER_DATA = 'todolist/auth-reducer/REMOVE_USER_DATA'\r\nconst SET_APP_INIT_STATUS = 'todolist/auth-reducer/SET_APP_INIT_STATUS'\r\n\r\n//initial state\r\nconst iState = {\r\n    appInit: false as boolean,\r\n    isAuth: false as boolean,\r\n    id: null as Nullable<number>,\r\n    email: null as Nullable<string>,\r\n    login: null as Nullable<string>,\r\n}\r\n\r\nexport const authReducer = (state: TAuthReducerState = iState, action: TAuthReducerActions) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                isAuth: true,\r\n                id: action.id,\r\n                email: action.email,\r\n                login: action.login,\r\n            }\r\n        case REMOVE_USER_DATA:\r\n            return {\r\n                ...state,\r\n                isAuth: false,\r\n                id: null,\r\n                email: null,\r\n                login: null,\r\n            }\r\n        case SET_APP_INIT_STATUS:\r\n            return {\r\n                ...state,\r\n                appInit: action.init\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const setUserData = (id: number, email: string, login: string) => ({\r\n    type: SET_USER_DATA,\r\n    id,\r\n    email,\r\n    login\r\n} as const)\r\nexport const removeUserData = () => ({type: REMOVE_USER_DATA} as const)\r\nexport const setAppInitStatus = (init: boolean) => ({type: SET_APP_INIT_STATUS, init} as const)\r\n\r\n//thunks\r\nexport const authMe = (): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        dispatch(setAppInitStatus(false))\r\n        const result = await authAPI.me()\r\n\r\n        if (result.resultCode === 0) {\r\n            dispatch(setUserData(result.data.id, result.data.email, result.data.login))\r\n            dispatch(setAppInitStatus(true))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            dispatch(setAppInitStatus(true))\r\n            throwNewError(dispatch, result.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppStatus('loading'))\r\n        const result = await authAPI.login(email, password, rememberMe)\r\n\r\n        if (result.resultCode === 0) {\r\n            await dispatch(authMe())\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch, result.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppInitStatus(false))\r\n        dispatch(setAppStatus('loading'))\r\n        const result = await authAPI.logout()\r\n\r\n        if (result.resultCode === 0) {\r\n            dispatch(removeUserData())\r\n            dispatch(setAppStatus('succeeded'))\r\n            dispatch(setAppInitStatus(true))\r\n        } else {\r\n            dispatch(setAppInitStatus(true))\r\n            throwNewError(dispatch, result.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\n//types\r\ntype Nullable<T> = T | null\r\nexport type TAuthReducerState = typeof iState\r\n\r\nexport type TAuthReducerActions =\r\n    | TSetUserData\r\n    | TRemoveUserData\r\n    | TSetAppInitStatus\r\ntype TSetUserData = ReturnType<typeof setUserData>\r\ntype TRemoveUserData = ReturnType<typeof removeUserData>\r\ntype TSetAppInitStatus = ReturnType<typeof setAppInitStatus>\r\n","import * as React from 'react';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {logout} from '../../redux/reducers/auth-reducer';\r\nimport {useNavigate} from \"react-router-dom\";\r\n// import IconButton from '@mui/material/IconButton';\r\n// import MenuIcon from '@mui/icons-material/Menu';\r\n\r\nexport const Header: React.FC = React.memo(() => {\r\n\r\n    const\r\n        dispatch = useDispatch(),\r\n        navigate = useNavigate(),\r\n        isAuth = useSelector((state: AppStateType) => state.auth.isAuth),\r\n        login = useSelector((state: AppStateType) => state.auth.login)\r\n\r\n    const logOut = () => {\r\n        dispatch(logout())\r\n        navigate('/login')\r\n    }\r\n\r\n    const loginHandler = () => {\r\n        navigate('/login')\r\n    }\r\n\r\n    return (\r\n        <Box sx={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h5\"\r\n                                component=\"div\"\r\n                                sx={{flexGrow: 1}}>\r\n                        My to do\r\n                    </Typography>\r\n                    {isAuth\r\n                        ? <div style={{display: 'flex', alignItems: 'center'}}>\r\n                            {login}\r\n                            <Button variant={'outlined'}\r\n                                    style={{marginLeft: '10px'}}\r\n                                    color=\"inherit\"\r\n                                    onClick={logOut}>Logout</Button>\r\n                        </div>\r\n                        : <Button variant={'outlined'}\r\n                                  color=\"inherit\" onClick={loginHandler}>Login</Button>}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </Box>\r\n    );\r\n})","import React from \"react\";\r\nimport MuiAlert, {AlertProps} from \"@mui/material/Alert\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppError} from \"../../redux/reducers/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport const ErrorSnackbar: React.FC<IProps> = props => {\r\n\r\n    const {error} = props\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n//types\r\ninterface IProps {\r\n    error: string | null\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField, Button} from \"@mui/material\";\r\n\r\ninterface IProps {\r\n    addTask: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: React.FC<IProps> = React.memo(props => {\r\n\r\n    const {addTask, disabled = false} = props\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const buttonStyle = {\r\n        maxWidth: '50px',\r\n        minWidth: '50px',\r\n        minHeight: '40px',\r\n        maxHeight: '40px',\r\n    }\r\n\r\n    const textFieldStyle = {\r\n        backgroundColor: 'white',\r\n        borderRadius: '5px',\r\n        margin: '10px'\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error) setError(null)\r\n        if (e.key === 'Enter') {\r\n            addItemOnClick()\r\n        }\r\n    }\r\n\r\n    const addItemOnClick = () => {\r\n        if (title.trim() !== \"\") {\r\n            addTask(title.trim())\r\n            setTitle(\"\")\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div style={{display: 'flex', alignItems: 'center'}}>\r\n            <TextField id=\"outlined-basic\"\r\n                       disabled={disabled}\r\n                       label={error || null}\r\n                       variant=\"outlined\"\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       className={error ? \"error\" : \"\"}\r\n                       size={'small'}\r\n                       error={!!error}\r\n                       style={textFieldStyle}/>\r\n            <Button onClick={addItemOnClick}\r\n                    disabled={disabled}\r\n                    variant={\"contained\"}\r\n                    style={buttonStyle}>Add</Button>\r\n        </div>\r\n    )\r\n})","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\n\r\nexport const MutableSpan: React.FC<IProps> = React.memo(props => {\r\n\r\n    const {title, onChangeTitle, disabled = false} = props\r\n    const [localTitle, setLocalTitle] = useState<string>('')\r\n    const [readingMode, setReadingMode] = useState<boolean>(true)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLocalTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onDblClickHandler = () => {\r\n        if (disabled) {\r\n            return\r\n        } else {\r\n            setLocalTitle(title)\r\n            setReadingMode(false)\r\n        }\r\n    }\r\n\r\n    const setChangeTitle = () => {\r\n        onChangeTitle(localTitle)\r\n        setReadingMode(true)\r\n    }\r\n\r\n    const setChangeTitleOnKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            setChangeTitle()\r\n        }\r\n    }\r\n\r\n    return (\r\n        readingMode\r\n            ? <span onDoubleClick={onDblClickHandler} >{title}</span>\r\n            : <input type=\"text\"\r\n                     disabled={disabled}\r\n                     value={localTitle}\r\n                     onBlur={setChangeTitle}\r\n                     onChange={onChangeHandler}\r\n                     onKeyPress={setChangeTitleOnKeyPress}\r\n                     autoFocus/>\r\n    )\r\n})\r\n\r\n//types\r\ninterface IProps {\r\n    title: string\r\n    onChangeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}","import {todolistAPI} from \"../../api/api\";\r\nimport {ThunkType} from \"../store\";\r\nimport {RequestStatusType, setAppError, setAppStatus} from \"./app-reducer\";\r\nimport {handlingError, throwNewError} from \"../../utils/error-utils\";\r\nimport { ITodolist } from \"../../types/types\";\r\n\r\n//constants\r\nconst ADD_TODOLIST = 'todolist/todolists-reducer/ADD_TODOLIST'\r\nconst SET_TODOLISTS = 'todolist/todolists-reducer/SET_TODOLISTS'\r\nconst CHANGE_TITLE_TODOLIST = 'todolist/todolists-reducer/CHANGE_TITLE_TODOLIST'\r\nexport const REMOVE_TODOLIST = 'todolist/todolists-reducer/REMOVE_TODOLIST'\r\nconst SET_TODOLIST_FILTER_STATUS = 'todolist/todolists-reducer/SET_TODOLIST_FILTER_STATUS'\r\nconst SET_TODOLISTS_STATUS = 'todolist/todolists-reducer/SET_TODOLISTS_STATUS'\r\n\r\n//initial state\r\nconst iState = {\r\n    todolists: [] as ITodolistWithFilter[],\r\n    todolistsStatus: 'idle' as RequestStatusType,\r\n}\r\n\r\n//reducer\r\nexport const todolistsReducer = (state: StateToDoListType = iState, action: TTodolistReducerActions): StateToDoListType => {\r\n    switch (action.type) {\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [{...action.todolist, filter: 'all'}, ...state.todolists]\r\n            }\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(i => ({...i, filter: 'all'}))\r\n            }\r\n        case CHANGE_TITLE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(i => i.id === action.toDoListID ? {...i, title: action.title} : i)\r\n            }\r\n        case SET_TODOLISTS_STATUS:\r\n            return {\r\n                ...state,\r\n                todolistsStatus: action.status\r\n            }\r\n        case SET_TODOLIST_FILTER_STATUS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(i => i.id === action.id ? {...i, filter: action.status} : i)\r\n            }\r\n        case REMOVE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(i => i.id !== action.toDoListID)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const addToDolistAC = (todolist: ITodolist) => ({\r\n    type: ADD_TODOLIST, todolist\r\n} as const)\r\n\r\nexport const setTodolistsAC = (todolists: Array<ITodolist>) => ({\r\n    type: SET_TODOLISTS, todolists\r\n} as const)\r\n\r\nexport const changeTitleToDoListAC = (toDoListID: string, title: string) => ({\r\n    type: CHANGE_TITLE_TODOLIST, toDoListID, title,\r\n} as const)\r\n\r\nexport const removeToDolistAC = (toDoListID: string) => ({\r\n    type: REMOVE_TODOLIST, toDoListID\r\n} as const)\r\n\r\nexport const setTodolistFilterStatusAC = (id: string, status: TFilter) => ({\r\n    type: SET_TODOLIST_FILTER_STATUS, id, status\r\n} as const)\r\n\r\nexport const setToDolistsStatusAC = (status: RequestStatusType) => ({\r\n    type: SET_TODOLISTS_STATUS, status\r\n} as const)\r\n\r\n//thunks\r\nexport const createTodolistTC = (title: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setAppStatus('loading'))\r\n\r\n        const response = await todolistAPI.createTodolist(title)\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(addToDolistAC(response.data.item))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch,response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const getTodolistsTC = (): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setAppStatus('loading'))\r\n\r\n        const data = await todolistAPI.getTodolists()\r\n\r\n        if (data) {\r\n            dispatch(setTodolistsAC(data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch,'Todolist`s loading error')\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const updateTodolistTitleTC = (todolistId: string, title: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setAppStatus(\"loading\"))\r\n\r\n        const response = await todolistAPI.updateTodolistTitle(todolistId, title)\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(changeTitleToDoListAC(todolistId, title))\r\n            dispatch(setAppStatus(\"succeeded\"))\r\n        } else {\r\n            throwNewError(dispatch,response.messages[0])\r\n        }\r\n\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistId: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setAppStatus(\"loading\"))\r\n\r\n        const response = await todolistAPI.deleteTodolist(todolistId)\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(removeToDolistAC(todolistId))\r\n            dispatch(setAppStatus(\"succeeded\"))\r\n        } else {\r\n            throwNewError(dispatch,response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\n//Types\r\nexport interface ITodolistWithFilter extends ITodolist {\r\n    filter: TFilter\r\n}\r\n\r\nexport type TFilter = 'all' | 'active' | 'completed'\r\nexport type StateToDoListType = typeof iState\r\nexport type TTodolistReducerActions =\r\n    | TAddToDoList\r\n    | TSetTodolists\r\n    | TChangeTitleToDoList\r\n    | TRemoveToDoList\r\n    | TSetTodolistFilterStatusAC\r\n    | TSetToDolistsStatus\r\ntype TAddToDoList = ReturnType<typeof addToDolistAC>\r\ntype TSetTodolists = ReturnType<typeof setTodolistsAC>\r\ntype TChangeTitleToDoList = ReturnType<typeof changeTitleToDoListAC>\r\nexport type TRemoveToDoList = ReturnType<typeof removeToDolistAC>\r\ntype TSetTodolistFilterStatusAC = ReturnType<typeof setTodolistFilterStatusAC>\r\ntype TSetToDolistsStatus = ReturnType<typeof setToDolistsStatusAC>\r\n\r\n\r\n","import {todolistAPI} from \"../../api/api\";\r\nimport {ThunkType} from \"../store\";\r\nimport {REMOVE_TODOLIST, setToDolistsStatusAC, TRemoveToDoList} from \"./todolists-reducer\";\r\nimport {setAppError} from \"./app-reducer\";\r\nimport {handlingError, throwNewError} from \"../../utils/error-utils\";\r\nimport {ITask} from \"../../types/types\";\r\n\r\n//constants\r\nconst ADD_TASK = 'todolist/tasks-reducer/ADD_TASK'\r\nconst SET_TASKS = 'todolist/tasks-reducer/SET_TODOLIST_TASKS'\r\nconst UPDATE_TASK = 'todolist/tasks-reducer/UPDATE_TASK'\r\nconst REMOVE_TASK = 'todolist/tasks-reducer/REMOVE_TASK'\r\n\r\n//eeducer\r\nexport const tasksReducer = (state: IStateTasks = {}, action: TTasksReducerActions): IStateTasks => {\r\n    switch (action.type) {\r\n        case ADD_TASK:\r\n            const oldTasks = state[action.todoListId]\r\n                ? [...state[action.todoListId]]\r\n                : []\r\n            return {\r\n                ...state,\r\n                [action.todoListId]: [action.task, ...oldTasks]\r\n            }\r\n        case SET_TASKS:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: action.tasks\r\n            }\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map((i: any) => i.id === action.taskId\r\n                    ? {...action.task}\r\n                    : i)\r\n            }\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.toDoListID]: state[action.toDoListID].filter((i: any) => i.id !== action.taskId)\r\n            }\r\n        case REMOVE_TODOLIST:\r\n            delete state[action.toDoListID]\r\n            return {...state}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const addTaskAC = (todoListId: string, task: ITask) => ({\r\n    type: ADD_TASK, todoListId, task\r\n} as const)\r\n\r\nexport const setTasksAC = (todolistId: string, tasks: Array<ITask>) => ({\r\n    type: SET_TASKS, todolistId, tasks\r\n} as const)\r\n\r\nexport const updateTaskAC = (todolistId: string, taskId: string, task: ITask) => ({\r\n    type: UPDATE_TASK, todolistId, taskId, task\r\n} as const)\r\n\r\nexport const removeTaskAC = (toDoListID: string, taskId: string) => ({\r\n    type: REMOVE_TASK, taskId, toDoListID\r\n} as const)\r\n\r\n//thunks\r\nexport const createTaskTC = (todolistId: string, title: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setToDolistsStatusAC('loading'))\r\n\r\n        const response = await todolistAPI.createTask(todolistId, title)\r\n        if (response.resultCode === 0) {\r\n            dispatch(addTaskAC(todolistId, response.data.item))\r\n            dispatch(setToDolistsStatusAC('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch, response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const getTasksTC = (todolistId: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setToDolistsStatusAC('loading'))\r\n\r\n        const response = await todolistAPI.getTasks(todolistId)\r\n\r\n        if (!response.data.error) {\r\n            dispatch(setTasksAC(todolistId, response.data.items))\r\n            dispatch(setToDolistsStatusAC('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch, response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, task: ITask): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setToDolistsStatusAC('loading'))\r\n\r\n        const response = await todolistAPI.updateTask(todolistId, {...task})\r\n        if (response.resultCode === 0) {\r\n            const newTask = response.data.item\r\n            dispatch(updateTaskAC(todolistId, newTask.id, {...newTask}))\r\n            dispatch(setToDolistsStatusAC('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch, response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string): ThunkType => async dispatch => {\r\n    try {\r\n        dispatch(setAppError(null))\r\n        dispatch(setToDolistsStatusAC('loading'))\r\n\r\n        const response = await todolistAPI.deleteTask(todolistId, taskId)\r\n\r\n        if (response.resultCode === 0) {\r\n            dispatch(removeTaskAC(todolistId, taskId))\r\n            dispatch(setToDolistsStatusAC('succeeded'))\r\n        } else {\r\n            throwNewError(dispatch, response.messages[0])\r\n        }\r\n    } catch (err) {\r\n        handlingError(dispatch, err)\r\n    }\r\n}\r\n\r\n//types\r\nexport interface IStateTasks {\r\n    [key: string]: Array<ITask>\r\n}\r\n\r\nexport type TTasksReducerActions =\r\n    TSetTasks\r\n    | TAddTusk\r\n    | TRemoveTask\r\n    | TUpdateTask\r\n    | TRemoveToDoList\r\ntype TAddTusk = ReturnType<typeof addTaskAC>\r\ntype TSetTasks = ReturnType<typeof setTasksAC>\r\ntype TUpdateTask = ReturnType<typeof updateTaskAC>\r\ntype TRemoveTask = ReturnType<typeof removeTaskAC>\r\n\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Checkbox} from \"@mui/material\";\r\nimport BookmarkBorderIcon from \"@mui/icons-material/BookmarkBorder\";\r\nimport BookmarkIcon from \"@mui/icons-material/Bookmark\";\r\nimport {MutableSpan} from \"../../components/MutableSpan/MutableSpan\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport ClearIcon from \"@mui/icons-material/Clear\";\r\nimport {deleteTaskTC, updateTaskTC} from \"../../redux/reducers/tasks-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {TaskStatuses} from \"../../api/api\";\r\nimport {ITask} from '../../types/types';\r\nimport styles from './Task.module.css'\r\n\r\ntype TProps = {\r\n    task: ITask\r\n    toDoListID: string\r\n}\r\n\r\nexport const Task: React.FC<TProps> = React.memo(props => {\r\n\r\n    const {task, toDoListID} = props\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTaskOnTask = () => {\r\n        dispatch(deleteTaskTC(toDoListID, task.id))\r\n    }\r\n\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newTaskStatus = task.status === TaskStatuses.Completed\r\n            ? TaskStatuses.New\r\n            : TaskStatuses.Completed\r\n\r\n        dispatch(updateTaskTC(toDoListID, {\r\n            ...task,\r\n            completed: e.currentTarget.checked,\r\n            status: newTaskStatus\r\n        }))\r\n    }\r\n\r\n    const changeTaskTitle = (title: string) => {\r\n        dispatch(updateTaskTC(toDoListID, {\r\n            ...task,\r\n            title: title\r\n        }))\r\n    }\r\n\r\n    return <div className={styles.task__wrapper}>\r\n        <Checkbox\r\n            onChange={changeTaskStatus}\r\n            checked={task.status === 2}\r\n            icon={<BookmarkBorderIcon/>}\r\n            checkedIcon={<BookmarkIcon/>}\r\n        />\r\n        <MutableSpan title={task.title} onChangeTitle={changeTaskTitle}/>\r\n        <IconButton onClick={removeTaskOnTask} style={{marginLeft: 'auto'}}>\r\n            <ClearIcon/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {MutableSpan} from \"../../components/MutableSpan/MutableSpan\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport {Button, CircularProgress, Paper} from \"@mui/material\";\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport {createTaskTC, getTasksTC} from \"../../redux/reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Task} from '../Task/Task';\r\nimport {TaskStatuses} from \"../../api/api\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {ITask} from \"../../types/types\";\r\nimport styles from './Todolist.module.css'\r\nimport {\r\n    deleteTodolistTC,\r\n    setTodolistFilterStatusAC,\r\n    TFilter,\r\n    updateTodolistTitleTC\r\n} from '../../redux/reducers/todolists-reducer';\r\n\r\nexport const Todolist: React.FC<IProps> = React.memo(props => {\r\n\r\n    const {toDoListID, title, tasks, filter} = props\r\n\r\n    const\r\n        dispatch = useDispatch(),\r\n        isAuth = useSelector((state: AppStateType) => state.auth.isAuth),\r\n        todolistsStatus = useSelector((state: AppStateType) => state.todolist.todolistsStatus),\r\n        isDisabled = todolistsStatus === 'loading'\r\n\r\n    useEffect(() => {\r\n        dispatch(getTasksTC(toDoListID))\r\n    }, [dispatch, toDoListID, isAuth])\r\n\r\n    //Work with todolist`s\r\n    const changeTitle = useCallback((title: string) => {\r\n        dispatch(updateTodolistTitleTC(toDoListID, title))\r\n    }, [dispatch, toDoListID])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        dispatch(createTaskTC(toDoListID, title))\r\n    }, [dispatch, toDoListID])\r\n\r\n    const removeToDoListHandler = useCallback(() => {\r\n        dispatch(deleteTodolistTC(toDoListID))\r\n    }, [dispatch, toDoListID])\r\n\r\n    //Filter tasks\r\n    const setTodolistFilterStatus = useCallback((id: string, status: TFilter) => {\r\n        dispatch(setTodolistFilterStatusAC(id, status))\r\n    }, [dispatch])\r\n\r\n    const onAllClickHandler = useCallback(() => setTodolistFilterStatus(toDoListID, \"all\"),\r\n        [setTodolistFilterStatus, toDoListID])\r\n\r\n    const onActiveClickHandler = useCallback(() => setTodolistFilterStatus(toDoListID, \"active\"),\r\n        [setTodolistFilterStatus, toDoListID])\r\n\r\n    const onCompletedClickHandler = useCallback(() => setTodolistFilterStatus(toDoListID, \"completed\"),\r\n        [setTodolistFilterStatus, toDoListID])\r\n\r\n    let filteredTasks = tasks ? tasks : [];\r\n\r\n    if (filter === \"active\") {\r\n        filteredTasks = props.tasks.filter((t: ITask) => t.status !== TaskStatuses.Completed)\r\n    }\r\n\r\n    if (filter === \"completed\") {\r\n        filteredTasks = props.tasks.filter((t: ITask) => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={5} style={{maxWidth: '320px'}}>\r\n                <div className={styles.todo__wrapper}>\r\n                    <div>\r\n                        <MutableSpan title={title}\r\n                                     disabled={isDisabled}\r\n                                     onChangeTitle={changeTitle}/>\r\n                        <IconButton onClick={removeToDoListHandler} disabled={isDisabled}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>\r\n                    </div>\r\n                    <AddItemForm addTask={addTaskHandler} disabled={isDisabled}/>\r\n                    <div>\r\n                        {todolistsStatus === 'loading'\r\n                            ? <div style={{textAlign: 'center'}}>\r\n                                <CircularProgress/>\r\n                            </div>\r\n                            : filteredTasks.map(t => {\r\n                                return <Task\r\n                                    key={t.id}\r\n                                    task={t}\r\n                                    toDoListID={toDoListID}\r\n                                />\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <hr/>\r\n                    <div className={styles.todo__buttons}>\r\n                        <Button\r\n                            variant={filter === 'all' ? \"contained\" : \"outlined\"}\r\n                            onClick={onAllClickHandler}\r\n                            size={'small'}>All</Button>\r\n                        <Button\r\n                            variant={filter === 'active' ? \"contained\" : \"outlined\"}\r\n                            onClick={onActiveClickHandler}\r\n                            size={'small'}>Active</Button>\r\n                        <Button\r\n                            variant={filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                            onClick={onCompletedClickHandler}\r\n                            size={'small'}>Completed</Button>\r\n                    </div>\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    )\r\n})\r\n\r\n//types\r\ninterface IProps {\r\n    toDoListID: string\r\n    title: string\r\n    tasks: Array<ITask>\r\n    filter: TFilter\r\n}","import React, {useCallback, useEffect} from 'react';\r\nimport styles from './Todolist.module.css';\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist\";\r\nimport {createTodolistTC, getTodolistsTC, ITodolistWithFilter} from \"../../redux/reducers/todolists-reducer\";\r\nimport {IStateTasks} from \"../../redux/reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nexport const TodolistList: React.FC = () => {\r\n\r\n    const\r\n        todolists = useSelector<AppStateType, ITodolistWithFilter[]>(state => state.todolist.todolists),\r\n        isAuth = useSelector((state: AppStateType) => state.auth.isAuth),\r\n        tasks = useSelector<AppStateType, IStateTasks>(state => state.tasks),\r\n        navigate = useNavigate(),\r\n        dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            navigate('/login')\r\n        }\r\n    }, [dispatch, isAuth, navigate])\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n            dispatch(getTodolistsTC())\r\n        }\r\n    }, [dispatch, isAuth])\r\n\r\n    const addToDoList = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className={styles.todolist__container}>\r\n            <AddItemForm addTask={addToDoList}/>\r\n            <div className={styles.todolist__todolists}>\r\n                {todolists.map(t => {\r\n                    return (\r\n                        <Todolist key={t.id}\r\n                                  tasks={tasks[t.id]}\r\n                                  toDoListID={t.id}\r\n                                  title={t.title}\r\n                                  filter={t.filter}\r\n                        />\r\n\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import FormControl from '@mui/material/FormControl';\r\nimport React, {useEffect} from 'react';\r\nimport {Button, Checkbox, FormControlLabel, FormGroup, FormLabel, Grid, Paper, TextField} from \"@mui/material\";\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {login} from '../../redux/reducers/auth-reducer';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\nexport const Login = () => {\r\n\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required field',\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required field',\r\n                }\r\n            }\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(login(values.email, values.password, values.rememberMe));\r\n            navigate('/')\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(isAuth) {\r\n            navigate('/')\r\n        }\r\n    }, [isAuth, navigate])\r\n\r\n    return (\r\n        <div>\r\n            <Grid container justifyContent={'center'}>\r\n                <Grid item xs={4}>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormControl>\r\n                            <Paper style={{padding: '15px'}}>\r\n                                <FormLabel>\r\n                                    Enter the test account details: <br/>\r\n                                    Email: free@samuraijs.com <br/>\r\n                                    Password: free\r\n                                </FormLabel>\r\n                                <FormGroup>\r\n                                    <TextField type={'email'}\r\n                                               label={'Email'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('email')}/>\r\n                                    <div>{formik.errors.email || null}</div>\r\n                                    <TextField type={'password'}\r\n                                               label={'Password'}\r\n                                               margin={'normal'}\r\n                                               {...formik.getFieldProps('password')}/>\r\n                                    <div>{formik.errors.password || null}</div>\r\n                                    <FormControlLabel\r\n                                        label={'Remember me'}\r\n                                        control={<Checkbox checked={formik.values.rememberMe}\r\n                                                           {...formik.getFieldProps('rememberMe')}/>}/>\r\n                                    <Button type={'submit'} variant={\"contained\"}\r\n                                            disabled={!!(formik.errors.email || formik.errors.password)}>Login</Button>\r\n                                </FormGroup>\r\n                            </Paper>\r\n                        </FormControl>\r\n                    </form>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport styles from \"./Footer.module.css\";\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport {faTelegram} from '@fortawesome/free-brands-svg-icons';\r\nimport {faGithub} from '@fortawesome/free-brands-svg-icons';\r\nimport {faLinkedin} from '@fortawesome/free-brands-svg-icons';\r\nimport {faWhatsapp} from '@fortawesome/free-brands-svg-icons';\r\n\r\nconst Footer = () => {\r\n    return (\r\n            <div className={styles.footer_wrapper}>\r\n                <div className={styles.footer_container}>\r\n                    <h3 className={styles.footer_name}>Created by Balyaev Dmitriy</h3>\r\n                    <div className={styles.footer_boxs}>\r\n                        <a className={styles.footer_box} href={'https://t.me/username09313'}>\r\n                            <FontAwesomeIcon icon={faTelegram} size={\"2x\"}/>\r\n                        </a>\r\n                        <a className={styles.footer_box} href={' https://wa.me/79139643588'}>\r\n                            <FontAwesomeIcon icon={faWhatsapp} size={\"2x\"}/>\r\n                        </a>\r\n                        <a className={styles.footer_box} href={'https://github.com/username91355'}>\r\n                            <FontAwesomeIcon icon={faGithub} size={\"2x\"}/>\r\n                        </a>\r\n                        <a className={styles.footer_box} href={'https://www.linkedin.com/in/dmitriy-balyaev-b651b0229/'}>\r\n                            <FontAwesomeIcon icon={faLinkedin} size={\"2x\"}/>\r\n                        </a>\r\n                    </div>\r\n                    <div className={styles.footer_copyright}>\r\n                        <span dangerouslySetInnerHTML={{\"__html\": \"&copy;\"}}/>\r\n                        <span>All rights reserved 2021-2022</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {AppStateType} from \"../redux/store\";\r\nimport {Header} from '../components/Header/Header';\r\nimport {CircularProgress, LinearProgress} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RequestStatusType} from \"../redux/reducers/app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {TodolistList} from \"../features/ToDoList/TodolistList\";\r\nimport {Route, Routes, useNavigate} from 'react-router-dom';\r\nimport {Login} from \"../features/login/Login\";\r\nimport {authMe} from \"../redux/reducers/auth-reducer\";\r\nimport Footer from \"../components/Footer/Footer\";\r\n\r\nexport const App: React.FC = () => {\r\n\r\n    const\r\n        appInit = useSelector((state: AppStateType) => state.auth.appInit),\r\n        isAuth = useSelector((state: AppStateType) => state.auth.isAuth),\r\n        appStatus = useSelector<AppStateType, RequestStatusType>(state => state.app.appStatus),\r\n        appError = useSelector<AppStateType, string | null>(state => state.app.appError),\r\n        navigate = useNavigate(),\r\n        dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(authMe())\r\n    }, [dispatch])\r\n\r\n    useEffect(() => {\r\n        if (appInit && !isAuth) {\r\n            navigate('/login')\r\n        }\r\n    }, [appInit, isAuth, navigate])\r\n\r\n    return (\r\n        <div className={'app__wrapper'}>\r\n            <div className={'app__container'}>\r\n            <Header/>\r\n            {appError && <ErrorSnackbar error={appError}/>}\r\n            {appStatus === 'loading'\r\n                ? <LinearProgress/>\r\n                : <div style={{height: '6px'}}/>}\r\n                <div className={'app__content'}>\r\n                    {appInit\r\n                        ? <Routes>\r\n                            <Route path='/'\r\n                                   element={<TodolistList/>}/>\r\n                            <Route path='/login' element={<Login/>}/>\r\n                            <Route path='*' element={<div><ErrorSnackbar error={'Page not found'}/></div>}/>\r\n                        </Routes>\r\n                        : <div style={{\r\n                            display: 'flex',\r\n                            minHeight: '100vh',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'space-around'\r\n                        }}>\r\n                            <CircularProgress/>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n","import {applyMiddleware, combineReducers, createStore } from \"redux\"\r\nimport {tasksReducer, TTasksReducerActions} from \"./reducers/tasks-reducer\";\r\nimport {TTodolistReducerActions, todolistsReducer} from \"./reducers/todolists-reducer\";\r\nimport thunk, {ThunkAction} from 'redux-thunk'\r\nimport {appReducer, TAppActions} from \"./reducers/app-reducer\";\r\nimport {authReducer, TAuthReducerActions} from \"./reducers/auth-reducer\";\r\n\r\nconst rootReducres = combineReducers({\r\n    todolist: todolistsReducer,\r\n    tasks: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducres>\r\nexport type AppActionType = TTodolistReducerActions | TTasksReducerActions | TAppActions | TAuthReducerActions\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, AppActionType>\r\n\r\nexport const store = createStore(rootReducres, applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './app/App';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from './redux/store';\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    // <BrowserRouter basename={process.env.PUBLIC_URL}/>\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root')\r\n);\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer_wrapper\":\"Footer_footer_wrapper__3--xI\",\"footer_container\":\"Footer_footer_container__zdb1B\",\"footer_boxs\":\"Footer_footer_boxs__3Cj7t\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolist__container\":\"Todolist_todolist__container__3p1li\",\"todolist__todolists\":\"Todolist_todolist__todolists__YBCxn\",\"todo__wrapper\":\"Todolist_todo__wrapper__3EO2h\",\"todo__buttons\":\"Todolist_todo__buttons__1-5wg\"};"],"sourceRoot":""}